# -*- coding: utf-8 -*-
"""lab 05 homework

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t3s8gNjJK9cYdkCHcWMwVETikLRCVKfB

#**Lab 5 - LU decompositions and Gaussian elimination**

Enter your code in the spaces provided. Do not change any of the variable names or function names that are already provided for you. In places where we specify the name of the return value, make sure that your code produces the a value with the correct name.
"""

# Do not edit this cell.

LabID="Lab5"

try:
  from graderHelp import ISGRADEPLOT
except ImportError:
  ISGRADEPLOT = True

"""**Enter your name, section number, and BYU NetID**"""

# Enter your first and last names in between the quotation marks.

first_name="Your first name goes here"

last_name="Your last name goes here"

# Enter your Math 215 section number in between the quotation marks.

section_number="Your Math 215 section number goes here"

# Enter your BYU NetID in between the quotation marks.  NOT YOUR BYU ID NUMBER!

BYUNetID="Your BYU NetID goes here"

"""**Import NumPy**"""

import numpy as np

"""**Problem 1**"""

def augment(A,b):
  #takes a matrix A and a vector B and combines into an augmented matrix
  Ab = np.column_stack((A, b))
  return Ab


augment(np.array([[3,2,1,1], [1,-2,1,1],[5,0,1,5]]), np.array([-1,3,2]))

"""**Problem 2**"""

def first_column_zeros(A):
  # takes matrix A and returns a row equivalent matrix B that has each element of B[1:, 0] = 0
  # B[1, 0] = Of matrix B: from row 1 to the end, all of column 0
  B=np.copy(A)
  for i in range(1, len(B)):
    factor = -B[i, 0]/ B[0, 0]
    B[i] = B[i] + factor * B[0]
  return B


first_column_zeros(np.array([[2,1,3,1], [1,2,-1,2.5], [4,2,-1,1]]))

"""**Problem 3**"""

import numpy as np

def row_echelon(A, b):
    B = augment(A.copy(), b.copy())
    n = len(B) # number of rows in A
    m = len(B[0]) # length of row 0 of B, i.e., number of columns in A

    for col in range(m):
      for i in range(col + 1, n):
          factor = -B[i, col] / B[col, col]
          B[i] = B[i] + factor * B[col]
    return B


row_echelon(np.array([[3., 1., -2.], [1., 2., -5.], [2., -4., 1.]]), np.array([1.1, 2., -3.]))

"""**Problem 4**"""

def LU_decomposition(A):
    n = len(A)  # Assuming A is a square matrix of size n x n.

    # Initialize L as an identity matrix and U as a copy of A.
    L = np.identity(n)
    U = np.copy(A)

    for j in range(n):
        # Iterate over columns.
        for i in range(j + 1, n):
            # Calculate the elimination multiplier Lij.
            L[i, j] = U[i, j] / U[j, j]

            # Update rows below the pivot element.
            U[i, j:] -= L[i, j] * U[j, j:]

    return L, U

"""**Problem 5**"""

def forward_substitution(L, b):
    n = len(b)
    # Initialize an empty vector y of size n
    y = np.zeros(n)
    for i in range(n):
        for j in range(i):
            y[i] += L[i, j] * y[j]
        y[i] = (b[i] - y[i]) / L[i, i]

    return y

"""**Problem 6**"""

def back_substitution(U, y):
    n = len(y)
    x = np.zeros(n)

    for i in range(n - 1, -1, -1):  # Start from the last row and move backward
        x[i] = y[i]  # Initialize x[i] with the corresponding value from y
        for j in range(i + 1, n):
            x[i] -= U[i, j] * x[j]
        x[i] /= U[i, i]

    return x

"""**Problem 7**"""

def LU_solver(A, b):
    # Perform LU decomposition on A to get L and U
    L, U = LU_decomposition(A)

    # Solve Ly = b using forward substitution
    y = forward_substitution(L, b)

    # Solve Ux = y using back substitution
    x = back_substitution(U, y)

    return x

"""**STOP!  BEFORE YOU SUBMIT THIS LAB:**  Go to the "Runtime" menu at the top of this page, and select "Restart and run all".  If any of the cells produce error messages, you will either need to fix the error(s) or delete the code that is causing the error(s).  Then use "Restart and run all" again to see if there are any new errors.  Repeat this until no new error messages show up.

**You are not ready to submit until you are able to select "Restart and run all" without any new error messages showing up.  Your code will not be able to be graded if there are any error messages.**

To submit your lab for grading you must first download it to your compute as .py file. In the "File" menu select "Download .py". The resulting file can then be uploaded to http://www.math.byu.edu:30000 for grading.
"""